// Generated by CoffeeScript 1.8.0
var Album, AlbumView, AlbumsListView, Router, app,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require('application');

AlbumsListView = require('views/albumslist');

AlbumView = require('views/album');

Album = require('models/album');

module.exports = Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    this.beforeUnload = __bind(this.beforeUnload, this);
    this.hashChange = __bind(this.hashChange, this);
    this.displayView = __bind(this.displayView, this);
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.routes = {
    '': 'albumslist',
    'albums': 'albumslist',
    'albums/edit': 'albumslistedit',
    'albums/new': 'newalbum',
    'albums/:albumid': 'album',
    'albums/:albumid/edit': 'albumedit',
    'albums/:albumid/photo/:photoid': 'photo',
    'albums/:albumid/edit/photo/:photoid': 'photoedit',
    'albums/:albumid/clearance': 'clearance'
  };

  Router.prototype.albumslist = function(editable) {
    if (editable == null) {
      editable = false;
    }
    return this.displayView(new AlbumsListView({
      collection: app.albums.sort(),
      editable: editable
    }));
  };

  Router.prototype.albumslistedit = function() {
    if (app.mode === 'public') {
      return this.navigate('albums', true);
    }
    return this.albumslist(true);
  };

  Router.prototype.album = function(id, editable, callback) {
    var album, _ref, _ref1;
    if (editable == null) {
      editable = false;
    }
    if (((_ref = this.mainView) != null ? (_ref1 = _ref.model) != null ? _ref1.get('id') : void 0 : void 0) === id) {
      if (editable) {
        this.mainView.makeEditable();
      } else {
        this.mainView.makeNonEditable();
      }
      if (callback) {
        return callback();
      } else {
        return this.mainView.closeGallery();
      }
    } else {
      album = app.albums.get(id) || new Album({
        id: id
      });
      return album.fetch().done((function(_this) {
        return function() {
          _this.displayView(new AlbumView({
            model: album,
            editable: editable
          }));
          if (callback) {
            return callback();
          } else {
            return _this.mainView.closeGallery();
          }
        };
      })(this)).fail((function(_this) {
        return function() {
          alert(t('this album does not exist'));
          return _this.navigate('albums', true);
        };
      })(this));
    }
  };

  Router.prototype.photo = function(albumid, photoid) {
    return this.album(albumid, false, (function(_this) {
      return function() {
        return _this.mainView.showPhoto(photoid);
      };
    })(this));
  };

  Router.prototype.photoedit = function(albumid, photoid) {
    return this.album(albumid, true, (function(_this) {
      return function() {
        return _this.mainView.showPhoto(photoid);
      };
    })(this));
  };

  Router.prototype.albumedit = function(id) {
    if (app.mode === 'public') {
      return this.navigate('albums', true);
    }
    this.album(id, true);
    return setTimeout(function() {
      return $('#title').focus();
    }, 200);
  };

  Router.prototype.newalbum = function() {
    if (app.mode === 'public') {
      return this.navigate('albums', true);
    }
    return window.app.albums.create({}, {
      success: (function(_this) {
        return function(model) {
          return _this.navigate("albums/" + model.id + "/edit", true);
        };
      })(this),
      error: (function(_this) {
        return function() {
          return _this.navigate("albums", true);
        };
      })(this)
    });
  };

  Router.prototype.displayView = function(view) {
    var el;
    if (this.mainView) {
      this.mainView.remove();
    }
    this.mainView = view;
    el = this.mainView.render().$el;
    el.addClass("mode-" + app.mode);
    return $('body').append(el);
  };

  Router.prototype.hashChange = function(event) {
    if (this.cancelNavigate) {
      event.stopImmediatePropagation();
      return this.cancelNavigate = false;
    } else {
      document.title = t('application title');
      if (this.mainView && this.mainView.dirty) {
        if (!(window.confirm(t("Navigate before upload")))) {
          event.stopImmediatePropagation();
          this.cancelNavigate = true;
          return window.location.href = event.originalEvent.oldURL;
        } else {
          return this.mainView.dirty = false;
        }
      }
    }
  };

  Router.prototype.beforeUnload = function(event) {
    var confirm;
    if (this.mainView && this.mainView.dirty) {
      confirm = t("Navigate before upload");
    } else {
      confirm = void 0;
    }
    event.returnValue = confirm;
    return confirm;
  };

  Router.prototype.clearance = function() {
    console.log('change cleance');
    return this.mainView.changeClearance;
  };

  return Router;

})(Backbone.Router);
