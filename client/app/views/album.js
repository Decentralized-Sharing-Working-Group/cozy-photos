// Generated by CoffeeScript 1.8.0
var AlbumView, BaseView, Clipboard, CozyClearanceModal, Galery, ShareModal, TAB_KEY_CODE, app, clipboard, thProcessor,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

app = require('application');

BaseView = require('lib/base_view');

Galery = require('views/galery');

Clipboard = require('lib/clipboard');

thProcessor = require('models/thumbprocessor');

CozyClearanceModal = require('cozy-clearance/modal_share_view');

clipboard = new Clipboard();

TAB_KEY_CODE = 9;

ShareModal = (function(_super) {
  __extends(ShareModal, _super);

  function ShareModal() {
    return ShareModal.__super__.constructor.apply(this, arguments);
  }

  ShareModal.prototype.initialize = function() {
    ShareModal.__super__.initialize.apply(this, arguments);
    return this.refresh();
  };

  ShareModal.prototype.makeURL = function(key) {
    return this.model.getPublicURL(key);
  };

  return ShareModal;

})(CozyClearanceModal);

module.exports = AlbumView = (function(_super) {
  __extends(AlbumView, _super);

  function AlbumView() {
    this.onPhotoCollectionChange = __bind(this.onPhotoCollectionChange, this);
    this.changeClearance = __bind(this.changeClearance, this);
    this.checkNew = __bind(this.checkNew, this);
    this.onFieldClicked = __bind(this.onFieldClicked, this);
    this.makeNonEditable = __bind(this.makeNonEditable, this);
    this.makeEditable = __bind(this.makeEditable, this);
    this.onDescriptionChanged = __bind(this.onDescriptionChanged, this);
    this.onTitleChanged = __bind(this.onTitleChanged, this);
    this.beforePhotoUpload = __bind(this.beforePhotoUpload, this);
    this.events = __bind(this.events, this);
    return AlbumView.__super__.constructor.apply(this, arguments);
  }

  AlbumView.prototype.template = require('templates/album');

  AlbumView.prototype.id = 'album';

  AlbumView.prototype.className = 'container-fluid';

  AlbumView.prototype.events = function() {
    return {
      'click a.delete': this.destroyModel,
      'click a.clearance': this.changeClearance,
      'click a.sendmail': this.sendMail,
      'click a#rebuild-th-btn': this.rebuildThumbs,
      'click a.stopediting': this.checkNew,
      'blur #title': this.onTitleChanged,
      'blur #description': this.onDescriptionChanged,
      'click #title': this.onFieldClicked,
      'click #description': this.onFieldClicked,
      'mousedown #title': this.onFieldClicked,
      'mousedown #description': this.onFieldClicked,
      'mouseup #title': this.onFieldClicked,
      'mouseup #description': this.onFieldClicked,
      'keydown #description': this.onDescriptionKeyUp
    };
  };

  AlbumView.prototype.initialize = function(options) {
    var onPhotoCollectionChange;
    AlbumView.__super__.initialize.call(this, options);
    onPhotoCollectionChange = _.debounce(this.onPhotoCollectionChange, 50);
    this.listenTo(this.model.photos, 'add remove', onPhotoCollectionChange);
    return this.listenTo(this.model, 'change:clearance', this.render);
  };

  AlbumView.prototype.getRenderData = function() {
    var downloadPath, key, res;
    key = $.url().param('key');
    downloadPath = "albums/" + (this.model.get('id')) + ".zip";
    if (key != null) {
      downloadPath += "?key=" + key;
    }
    res = _.extend({
      downloadPath: downloadPath,
      photosNumber: this.model.photos.length
    }, this.model.attributes);
    return res;
  };

  AlbumView.prototype.afterRender = function() {
    document.title = "" + (t('application title')) + " - " + (this.model.get('title'));
    this.title = this.$('#title');
    this.description = this.$('#description');
    this.galery = new Galery({
      el: this.$('#photos'),
      editable: this.options.editable,
      collection: this.model.photos,
      beforeUpload: this.beforePhotoUpload
    });
    this.galery.album = this.model;
    this.galery.render();
    if (this.options.editable) {
      return this.makeEditable();
    } else {
      this.title.addClass('disabled');
      return this.description.addClass('disabled');
    }
  };

  AlbumView.prototype.beforePhotoUpload = function(callback) {
    return callback({
      albumid: this.model.id
    });
  };

  AlbumView.prototype.onTitleChanged = function() {
    return this.saveModel({
      title: this.title.val().trim()
    });
  };

  AlbumView.prototype.onDescriptionChanged = function() {
    return this.saveModel({
      description: this.description.val().trim()
    });
  };

  AlbumView.prototype.makeEditable = function() {
    document.title = "" + (t('application title')) + " - " + (this.model.get('title'));
    this.$el.addClass('editing');
    this.options.editable = true;
    return this.galery.options.editable = true;
  };

  AlbumView.prototype.makeNonEditable = function() {
    document.title = "" + (t('application title')) + " - " + (this.model.get('title'));
    this.$el.removeClass('editing');
    this.options.editable = false;
    return this.galery.options.editable = false;
  };

  AlbumView.prototype.onFieldClicked = function(event) {
    if (!this.options.editable) {
      event.preventDefault();
      return false;
    }
  };

  AlbumView.prototype.destroyModel = function() {
    if (confirm(t("are you sure you want to delete this album"))) {
      return this.model.destroy().then(function() {
        return app.router.navigate('albums', true);
      });
    }
  };

  AlbumView.prototype.checkNew = function(event) {
    if (this.model.get('title') === '' && this.model.get('description') === '' && this.model.photos.length === 0) {
      if (confirm(t('delete empty album'))) {
        event.preventDefault();
        this.model.destroy().then(function() {
          return app.router.navigate('albums', true);
        });
      }
    }
    return true;
  };

  AlbumView.prototype.changeClearance = function(event) {
    if (this.model.get('clearance') == null) {
      this.model.set('clearance', []);
    }
    this.model.set('type', 'album');
    this.model.set('key', this.model.get('id'));
    console.log(this.model.get('key'));
    return new ShareModal({
      model: this.model
    });
  };

  AlbumView.prototype.rebuildThumbs = function(event) {
    var models, recFunc;
    $("#rebuild-th p").remove();
    models = this.model.photos.models;
    recFunc = function() {
      var model;
      if (models.length > -1) {
        model = models.pop();
        return setTimeout(function() {
          thProcessor.process(model);
          return recFunc();
        }, 500);
      }
    };
    return recFunc();
  };

  AlbumView.prototype.onDescriptionKeyUp = function(event) {
    if (TAB_KEY_CODE === event.keyCode || TAB_KEY_CODE === event.which) {
      return $('.stopediting').focus();
    }
  };

  AlbumView.prototype.saveModel = function(data) {
    data.updated = Date.now();
    return this.model.save(data);
  };

  AlbumView.prototype.onPhotoCollectionChange = function() {
    this.model.save({
      updated: Date.now()
    });
    return this.$('.photo-number').html(this.model.photos.length);
  };

  AlbumView.prototype.showPhoto = function(photoid) {
    return this.galery.showPhoto(photoid);
  };

  AlbumView.prototype.closeGallery = function() {
    return this.galery.closePhotobox();
  };

  return AlbumView;

})(BaseView);
