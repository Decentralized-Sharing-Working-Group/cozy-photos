// Generated by CoffeeScript 1.8.0
var Photo, async, cozydb,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

cozydb = require('cozydb');

async = require('async');

module.exports = Photo = (function(_super) {
  __extends(Photo, _super);

  function Photo() {
    return Photo.__super__.constructor.apply(this, arguments);
  }

  Photo.schema = {
    id: String,
    title: String,
    description: String,
    orientation: Number,
    binary: cozydb.NoSchema,
    _attachments: Object,
    albumid: String,
    date: String
  };

  Photo.fromAlbum = function(album, callback) {
    var params;
    if (album.folderid === "all") {
      return Photo.request('all', {}, callback);
    } else {
      params = {
        startkey: [album.id],
        endkey: [album.id + "0"]
      };
      return Photo.request('byalbum', params, callback);
    }
  };

  Photo.albumsThumbs = function(callback) {
    var params;
    params = {
      reduce: true,
      group: true
    };
    return Photo.rawRequest('albumphotos', params, function(err, results) {
      var out, result, _i, _len;
      if (err) {
        return callback(err);
      }
      out = {};
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        out[result.key] = result.value;
      }
      return callback(null, out);
    });
  };

  Photo.prototype.destroyWithBinary = function(callback) {
    var binaries;
    if ((this.binary != null) && typeof this.binary === 'object') {
      binaries = Object.keys(this.binary);
      return async.eachSeries(binaries, (function(_this) {
        return function(bin, cb) {
          return _this.removeBinary(bin, function(err) {
            if (err) {
              console.log("Cannot destroy binary linked to photo " + _this.id);
            }
            return cb();
          });
        };
      })(this), (function(_this) {
        return function(err) {
          return _this.destroy(callback);
        };
      })(this));
    } else {
      return this.destroy(callback);
    }
  };

  return Photo;

})(cozydb.CozyModel);
