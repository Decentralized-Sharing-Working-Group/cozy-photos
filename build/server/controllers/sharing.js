// Generated by CoffeeScript 1.8.0
var Album, Photo, albumCtl, async, cache, clearance, clearanceCtl, cozydb, fs, getUser, localizationManager, photoCtl;

async = require('async');

clearance = require('cozy-clearance');

cozydb = require('cozydb');

Album = require('../models/album');

albumCtl = require('./album');

Photo = require('../models/photo');

photoCtl = require('./photo');

fs = require('fs');

localizationManager = require('../helpers/localization_manager');

getUser = function(callback) {
  return cozydb.api.getCozyUser(function(err, user) {
    if (err) {
      return callback(err);
    }
    if ((user != null ? user.public_name : void 0) && user.public_name.length > 0) {
      return callback(null, {
        name: user.public_name,
        email: user.email
      });
    } else {
      return localizationManager.ensureReady(function(err) {
        return callback(null, {
          name: localizationManager.t('default user name'),
          email: null
        });
      });
    }
  });
};

clearanceCtl = clearance.controller({
  mailTemplate: function(options, callback) {
    return getUser(function(err, user) {
      options.displayName = user.name;
      options.displayEmail = user.email;
      return localizationManager.render('sharemail', options, callback);
    });
  },
  mailSubject: function(options, callback) {
    return getUser(function(err, user) {
      return localizationManager.ensureReady(function(err) {
        return callback(null, localizationManager.t('email sharing subject', {
          displayName: user.name,
          name: options.doc.title
        }));
      });
    });
  }
});

module.exports.fetch = function(req, res, next, id) {
  return Album.find(id, function(err, album) {
    if (album) {
      req.doc = album;
      return next();
    } else {
      err = new Error('bad usage');
      err.status = 400;
      return next(err);
    }
  });
};

module.exports.markPublicRequests = function(req, res, next) {
  if (req.url.match(/^\/public/)) {
    req["public"] = true;
  }
  return next();
};

module.exports.checkPermissions = function(album, req, callback) {
  if (!req["public"]) {
    return callback(null, true);
  }
  if (album.clearance === 'hidden') {
    album.clearance = 'public';
  }
  if (album.clearance === 'private') {
    album.clearance = [];
  }
  return clearance.check(album, 'r', req, callback);
};

cache = {};

module.exports.checkPermissionsPhoto = function(photo, perm, req, callback) {
  var albumid, incache;
  if (!req["public"]) {
    return callback(null, true);
  }
  albumid = photo.albumid;
  incache = cache[albumid];
  if (incache) {
    return clearance.check({
      clearance: incache
    }, perm, req, callback);
  } else {
    return Album.find(albumid, function(err, album) {
      if (err || !album) {
        return callback(null, false);
      }
      if (album.clearance === 'hidden') {
        album.clearance = 'public';
      }
      if (album.clearance === 'private') {
        album.clearance = [];
      }
      cache[albumid] = album.clearance;
      return clearance.check(album, perm, req, callback);
    });
  }
};

module.exports.change = function(req, res, next) {
  cache[req.params.shareid] = null;
  return clearanceCtl.change(req, res, next);
};

module.exports.callback = function(req, res, next) {
  clearanceCtl.callback(req.query.code);
  return albumCtl.index(req, res, next);
};

module.exports.micropub = function(req, res, next) {
  console.log('get photo');
  return clearanceCtl.micropub(req, res, next);
};

module.exports.getPhoto = function(req, res, next) {
  return clearanceCtl.test(req, res, next);
};

module.exports.photos = function(req, res, next) {
  var key;
  key = req.query.key;
  console.log('album id : ' + req.query.key);
  return Album.find(key, function(err, album) {
    if (err) {
      return next(err);
    }
    return Photo.fromAlbum(album, function(err, photos) {
      var laterStream;
      if (err) {
        return next(err);
      }
      console.log('get photos o/');
      laterStream = photos[0].getBinary("raw", function(err) {
        if (err) {
          return next(err);
        }
      });
      return laterStream.on('ready', function(trueStream) {
        return clearanceCtl.micropub(req, res, next, trueStream);
      });
    });
  });
};

module.exports.sendAll = clearanceCtl.sendAll;

module.exports.contactList = clearanceCtl.contactList;

module.exports.contact = clearanceCtl.contact;

module.exports.contactPicture = clearanceCtl.contactPicture;

module.exports.indieAuth = clearanceCtl.indieAuth;

module.exports.clearanceCtl = clearanceCtl;
